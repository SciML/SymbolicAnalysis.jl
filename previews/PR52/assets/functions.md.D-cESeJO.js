import{_ as l,c as p,j as i,a,G as e,a5 as n,B as o,o as r}from"./chunks/framework.DdMmfCjO.js";const _=JSON.parse('{"title":"Special functions","description":"","frontmatter":{},"headers":[],"relativePath":"functions.md","filePath":"functions.md","lastUpdated":null}'),d={name:"functions.md"},c={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},M={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},V={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},X={class:"jldocstring custom-block",open:""};function O(D,s,I,q,Y,P){const t=o("Badge");return r(),p("div",null,[s[69]||(s[69]=i("h1",{id:"Special-functions",tabindex:"-1"},[a("Special functions "),i("a",{class:"header-anchor",href:"#Special-functions","aria-label":'Permalink to "Special functions {#Special-functions}"'},"â€‹")],-1)),s[70]||(s[70]=i("p",null,"Since some atoms are not available in the base language or other packages we have implemented them here.",-1)),i("details",c,[i("summary",null,[s[0]||(s[0]=i("a",{id:"SymbolicAnalysis.dotsort-Tuple{AbstractVector, AbstractVector}",href:"#SymbolicAnalysis.dotsort-Tuple{AbstractVector, AbstractVector}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.dotsort")],-1)),s[1]||(s[1]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[2]||(s[2]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dotsort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y)</span></span></code></pre></div><p>Sorts <code>x</code> and <code>y</code> and returns the dot product of the sorted vectors.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `x::AbstractVector`: A vector.</span></span>\n<span class="line"><span>- `y::AbstractVector`: A vector.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",h,[i("summary",null,[s[3]||(s[3]=i("a",{id:"SymbolicAnalysis.eigsummax-Tuple{LinearAlgebra.Symmetric, Int64}",href:"#SymbolicAnalysis.eigsummax-Tuple{LinearAlgebra.Symmetric, Int64}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.eigsummax")],-1)),s[4]||(s[4]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[5]||(s[5]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eigsummax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symmetric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, k)</span></span></code></pre></div><p>Returns the sum of the <code>k</code> largest eigenvalues of <code>m</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `m::Symmetric`: A symmetric matrix.</span></span>\n<span class="line"><span>- `k::Int`: The Real of largest eigenvalues to sum.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",g,[i("summary",null,[s[6]||(s[6]=i("a",{id:"SymbolicAnalysis.eigsummin-Tuple{LinearAlgebra.Symmetric, Int64}",href:"#SymbolicAnalysis.eigsummin-Tuple{LinearAlgebra.Symmetric, Int64}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.eigsummin")],-1)),s[7]||(s[7]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[8]||(s[8]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eigsummin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symmetric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, k)</span></span></code></pre></div><p>Returns the sum of the <code>k</code> smallest eigenvalues of <code>m</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `m::Symmetric`: A symmetric matrix.</span></span>\n<span class="line"><span>- `k::Int`: The Real of smallest eigenvalues to sum.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",u,[i("summary",null,[s[9]||(s[9]=i("a",{id:"SymbolicAnalysis.huber",href:"#SymbolicAnalysis.huber"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.huber")],-1)),s[10]||(s[10]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[11]||(s[11]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">huber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, M</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the Huber loss function of <code>x</code> with threshold <code>M</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `x::Real`: A Real.</span></span>\n<span class="line"><span>- `M::Real`: The threshold.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",k,[i("summary",null,[s[12]||(s[12]=i("a",{id:"SymbolicAnalysis.invprod-Tuple{AbstractVector}",href:"#SymbolicAnalysis.invprod-Tuple{AbstractVector}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.invprod")],-1)),s[13]||(s[13]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[14]||(s[14]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">invprod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the inverse of the product of the elements of <code>x</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `x::AbstractVector`: A vector.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",b,[i("summary",null,[s[15]||(s[15]=i("a",{id:"SymbolicAnalysis.lognormcdf-Tuple{Real}",href:"#SymbolicAnalysis.lognormcdf-Tuple{Real}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.lognormcdf")],-1)),s[16]||(s[16]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[17]||(s[17]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lognormcdf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the log of the normal cumulative distribution function of <code>x</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `x::Real`: A Real.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",m,[i("summary",null,[s[18]||(s[18]=i("a",{id:"SymbolicAnalysis.matrix_frac-Tuple{AbstractVector, AbstractMatrix}",href:"#SymbolicAnalysis.matrix_frac-Tuple{AbstractVector, AbstractMatrix}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.matrix_frac")],-1)),s[19]||(s[19]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[20]||(s[20]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">matrix_frac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the quadratic form <code>x&#39; * P^{-1} * x</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `x::AbstractVector`: A vector.</span></span>\n<span class="line"><span>- `P::AbstractMatrix`: A matrix.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",y,[i("summary",null,[s[21]||(s[21]=i("a",{id:"SymbolicAnalysis.perspective-Tuple{Function, Any, Real}",href:"#SymbolicAnalysis.perspective-Tuple{Function, Any, Real}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.perspective")],-1)),s[22]||(s[22]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">perspective</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x, s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the perspective function <code>s * f(x / s)</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `f::Function`: A function.</span></span>\n<span class="line"><span>- `x`: A Real.</span></span>\n<span class="line"><span>- `s::Real`: A positive Real.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",v,[i("summary",null,[s[24]||(s[24]=i("a",{id:"SymbolicAnalysis.quad_form-Tuple{AbstractVector, AbstractMatrix}",href:"#SymbolicAnalysis.quad_form-Tuple{AbstractVector, AbstractMatrix}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.quad_form")],-1)),s[25]||(s[25]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[26]||(s[26]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">quad_form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the quadratic form <code>x&#39; * P * x</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `x::AbstractVector`: A vector.</span></span>\n<span class="line"><span>- `P::AbstractMatrix`: A matrix.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",A,[i("summary",null,[s[27]||(s[27]=i("a",{id:"SymbolicAnalysis.quad_over_lin-Tuple{Real, Real}",href:"#SymbolicAnalysis.quad_over_lin-Tuple{Real, Real}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.quad_over_lin")],-1)),s[28]||(s[28]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[29]||(s[29]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">quad_over_lin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the quadratic over linear form <code>x^2 / y</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `x`: A Real or a vector.</span></span>\n<span class="line"><span>- `y::Real`: A positive Real.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",f,[i("summary",null,[s[30]||(s[30]=i("a",{id:"SymbolicAnalysis.sum_largest-Tuple{AbstractMatrix, Integer}",href:"#SymbolicAnalysis.sum_largest-Tuple{AbstractMatrix, Integer}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.sum_largest")],-1)),s[31]||(s[31]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[32]||(s[32]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum_largest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, k)</span></span></code></pre></div><p>Returns the sum of the <code>k</code> largest elements of <code>x</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `x::AbstractMatrix`: A matrix.</span></span>\n<span class="line"><span>- `k::Int`: The Real of largest elements to sum.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",x,[i("summary",null,[s[33]||(s[33]=i("a",{id:"SymbolicAnalysis.sum_smallest-Tuple{AbstractMatrix, Integer}",href:"#SymbolicAnalysis.sum_smallest-Tuple{AbstractMatrix, Integer}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.sum_smallest")],-1)),s[34]||(s[34]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[35]||(s[35]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum_smallest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, k)</span></span></code></pre></div><p>Returns the sum of the <code>k</code> smallest elements of <code>x</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `x::AbstractMatrix`: A matrix.</span></span>\n<span class="line"><span>- `k::Int`: The Real of smallest elements to sum.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",j,[i("summary",null,[s[36]||(s[36]=i("a",{id:"SymbolicAnalysis.trinv-Tuple{AbstractMatrix}",href:"#SymbolicAnalysis.trinv-Tuple{AbstractMatrix}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.trinv")],-1)),s[37]||(s[37]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[38]||(s[38]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">trinv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the trace of the inverse of <code>x</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `x::AbstractMatrix`: A matrix.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",E,[i("summary",null,[s[39]||(s[39]=i("a",{id:"SymbolicAnalysis.tv-Tuple{AbstractVector{<:AbstractMatrix}}",href:"#SymbolicAnalysis.tv-Tuple{AbstractVector{<:AbstractMatrix}}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.tv")],-1)),s[40]||(s[40]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[41]||(s[41]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:AbstractMatrix}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the total variation of <code>x</code>, defined as <code>sum_{i,j} |x_{k+1}[i,j] - x_k[i,j]|</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `x::AbstractVector`: A vector of matrices.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",C,[i("summary",null,[s[42]||(s[42]=i("a",{id:"SymbolicAnalysis.tv-Tuple{Vector{<:Real}}",href:"#SymbolicAnalysis.tv-Tuple{Vector{<:Real}}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.tv")],-1)),s[43]||(s[43]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[44]||(s[44]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Returns the total variation of <code>x</code>, defined as <code>sum_i |x_{i+1} - x_i|</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `x::AbstractVector`: A vector.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",F,[i("summary",null,[s[45]||(s[45]=i("a",{id:"SymbolicAnalysis.affine_map-Tuple{typeof(SymbolicAnalysis.conjugation), Matrix, Matrix, Matrix}",href:"#SymbolicAnalysis.affine_map-Tuple{typeof(SymbolicAnalysis.conjugation), Matrix, Matrix, Matrix}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.affine_map")],-1)),s[46]||(s[46]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[47]||(s[47]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">affine_map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, X, B, Y)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">affine_map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, X, B, Ys)</span></span></code></pre></div><p>Affine map, i.e., <code>B + f(X, Y)</code> or <code>B + sum(f(X, Y) for Y in Ys)</code> for a function <code>f</code> where <code>f</code> is a positive linear operator.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `f::Function`: One of the following functions: `conjugation`, `diag`, `tr` and `hadamard_product`.</span></span>\n<span class="line"><span>- `X::Matrix`: A symmetric positive definite matrix.</span></span>\n<span class="line"><span>- `B::Matrix`: A matrix.</span></span>\n<span class="line"><span>- `Y::Matrix`: A matrix.</span></span>\n<span class="line"><span>- `Ys::Vector{&lt;:Matrix}`: A vector of matrices.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",S,[i("summary",null,[s[48]||(s[48]=i("a",{id:"SymbolicAnalysis.conjugation-Tuple{Any, Any}",href:"#SymbolicAnalysis.conjugation-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.conjugation")],-1)),s[49]||(s[49]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[50]||(s[50]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">conjugation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, B)</span></span></code></pre></div><p>Conjugation of a matrix <code>X</code> by a matrix <code>B</code> is defined as <code>B&#39;X*B</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `X::Matrix`: A symmetric positive definite matrix.</span></span>\n<span class="line"><span>- `B::Matrix`: A matrix.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",M,[i("summary",null,[s[51]||(s[51]=i("a",{id:"SymbolicAnalysis.hadamard_product-Tuple{AbstractMatrix, AbstractMatrix}",href:"#SymbolicAnalysis.hadamard_product-Tuple{AbstractMatrix, AbstractMatrix}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.hadamard_product")],-1)),s[52]||(s[52]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[53]||(s[53]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hadamard_product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, B)</span></span></code></pre></div><p>Hadamard product or element-wise multiplication of a symmetric positive definite matrix <code>X</code> by a positive semi-definite matrix <code>B</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `X::Matrix`: A symmetric positive definite matrix.</span></span>\n<span class="line"><span>- `B::Matrix`: A positive semi-definite matrix.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",T,[i("summary",null,[s[54]||(s[54]=i("a",{id:"SymbolicAnalysis.log_quad_form-Tuple{Vector{<:Number}, Matrix}",href:"#SymbolicAnalysis.log_quad_form-Tuple{Vector{<:Number}, Matrix}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.log_quad_form")],-1)),s[55]||(s[55]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[56]||(s[56]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log_quad_form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, X)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log_quad_form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ys, X)</span></span></code></pre></div><p>Log of the quadratic form of a symmetric positive definite matrix <code>X</code> and a vector <code>y</code> is defined as <code>log(y&#39;*X*y)</code> or for a vector of vectors <code>ys</code> as <code>log(sum(y&#39;*X*y for y in ys))</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `y::Vector`: A vector of `Number`s or a `Vector` of `Vector`s.</span></span>\n<span class="line"><span>- `X::Matrix`: A symmetric positive definite matrix.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",B,[i("summary",null,[s[57]||(s[57]=i("a",{id:"SymbolicAnalysis.scalar_mat",href:"#SymbolicAnalysis.scalar_mat"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.scalar_mat")],-1)),s[58]||(s[58]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[59]||(s[59]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scalar_mat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>Scalar matrix of a symmetric positive definite matrix <code>X</code> is defined as <code>tr(X)*I(k)</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `X::Matrix`: A symmetric positive definite matrix.</span></span>\n<span class="line"><span>- `k::Int`: The size of the identity matrix.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",V,[i("summary",null,[s[60]||(s[60]=i("a",{id:"SymbolicAnalysis.schatten_norm",href:"#SymbolicAnalysis.schatten_norm"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.schatten_norm")],-1)),s[61]||(s[61]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[62]||(s[62]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">schatten_norm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Schatten norm of a symmetric positive definite matrix <code>X</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `X::Matrix`: A symmetric positive definite matrix.</span></span>\n<span class="line"><span>- `p::Int`: The p-norm.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",R,[i("summary",null,[s[63]||(s[63]=i("a",{id:"SymbolicAnalysis.sdivergence-Tuple{Any, Any}",href:"#SymbolicAnalysis.sdivergence-Tuple{Any, Any}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.sdivergence")],-1)),s[64]||(s[64]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[65]||(s[65]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sdivergence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, Y)</span></span></code></pre></div><p>Symmetric divergence of two symmetric positive definite matrices <code>X</code> and <code>Y</code> is defined as <code>logdet((X+Y)/2) - 1/2*logdet(X*Y)</code>.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `X::Matrix`: A symmetric positive definite matrix.</span></span>\n<span class="line"><span>- `Y::Matrix`: A symmetric positive definite matrix.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))]),i("details",X,[i("summary",null,[s[66]||(s[66]=i("a",{id:"SymbolicAnalysis.sum_log_eigmax-Tuple{Function, AbstractMatrix, Int64}",href:"#SymbolicAnalysis.sum_log_eigmax-Tuple{Function, AbstractMatrix, Int64}"},[i("span",{class:"jlbinding"},"SymbolicAnalysis.sum_log_eigmax")],-1)),s[67]||(s[67]=a()),e(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[68]||(s[68]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum_log_eigmax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(X, k)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum_log_eigmax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, X, k)</span></span></code></pre></div><p>Sum of the log of the maximum eigenvalues of a symmetric positive definite matrix <code>X</code>. If a function <code>f</code> is provided, the sum is over <code>f</code> applied to the log of the eigenvalues.</p><p><strong>Arguments</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- `f::Function`: A function.</span></span>\n<span class="line"><span>- `X::Matrix`: A symmetric positive definite matrix.</span></span>\n<span class="line"><span>- `k::Int`: The number of eigenvalues to consider.</span></span></code></pre></div><p><a href="https://github.com/Vaibhavdixit02/SymbolicAnalysis.jl" target="_blank" rel="noreferrer">source</a></p>',5))])])}const w=l(d,[["render",O]]);export{_ as __pageData,w as default};
